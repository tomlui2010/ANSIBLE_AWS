version: '2.1'

orbs:
  aws-cli: circleci/aws-cli@4.0

commands:
  print_pipeline_id:
    parameters:
      id: 
        type: string
    steps:
      - run: echo << parameters.id >>

  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}

jobs:
  create_prometheus_infrastructure:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile_name: default
      - run:
          name: Cloudformation script to create an EC2 instances
          command: |
             cat template.yml
             aws cloudformation deploy --template-file template.yml --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}
      - run:
          name: AWS CLI script to create inventory file
          command: |
             echo "[prometheus_server]" > /tmp/inventory.ini
             echo "Waiting for the EC2 instance to be in the running state..."
             INSTANCE_IDS=$(aws ec2 describe-instances --query 'Reservations[*].Instances[?State.Name != `terminated`].InstanceId' --output json)
             INSTANCE_ID=$(echo $INSTANCE_IDS | jq -r 'flatten | select(. != null)[] | select(length > 0)' )
             echo "Instance ID: $INSTANCE_ID"
             #aws ec2 wait instance-running --instance-ids $INSTANCE_ID
             #aws ec2 wait instance-running --instance-ids $INSTANCE_ID --query 'Reservations[*].Instances[*].State.Name' --output text | grep -v terminated
             PUBLIC_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[?State.Name != `terminated` && Tags[?Key==`Name` && Value==`prometheus_server`]][PublicIpAddress]' --output text)
             echo "$PUBLIC_IP" >> /tmp/inventory.ini
             echo "[prometheus_node_exporter]" >> /tmp/inventory.ini
             PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[*].Instances[?Tags[?Key==`Name` && Value==`prometheus_node_exporter`]].PublicIpAddress' --output text)
             echo "$PUBLIC_IP" >> /tmp/inventory.ini
             cat /tmp/inventory.ini
      - run:
          name: Extract Public DNS
          command: |
            PUBLIC_DNS=$(aws cloudformation describe-stacks --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} --query 'Stacks[0].Outputs[?OutputKey==`NodeExporterPublicDNS`].OutputValue' --output text)
            echo PUBLIC_DNS > /tmp/public_dns.env
      - persist_to_workspace:
          root: /tmp
          paths: 
            - inventory.ini
            - public_dns.env
      - destroy_environment

  configure_prometheus_infrastructure:
    docker:
      - image: python:3.7-alpine3.11

    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["SHA256:+3VL1g52e8x9TZV+9yLDRkHMGPAe7IbDxHXYMue691M"]
      - attach_workspace:
          at: /tmp
      - run: 
          name: Install Ansible
          command: |
             apk add --update ansible
             apk add --update openssh
      - run:
          name: Run Playbook and Configure server
          command: |
             cat /tmp/inventory.ini
             ansible-playbook -e "PUBLIC_DNS=$(cat /tmp/public_dns.env)" -i /tmp/inventory.ini main.yml -vvv --limit prometheus_server -vvv

workflows:
  app-deployment:
    jobs:
      - create_prometheus_infrastructure:
          context: ansible-aws
      - configure_prometheus_infrastructure:
          requires: 
            - create_prometheus_infrastructure
