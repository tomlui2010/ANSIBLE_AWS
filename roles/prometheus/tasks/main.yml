---
- name: Create Prometheus user and directories
  become: true
  block:
    - name: Create Prometheus user if not exists
      ansible.builtin.command:
        cmd: useradd --system --no-create-home prometheus
        creates: /etc/prometheus
      ignore_errors: true

    - name: Create Prometheus directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      loop:
        - /etc/prometheus
        - /var/lib/prometheus

- name: Download Prometheus binary
  get_url:
    url: "https://github.com/prometheus/prometheus/releases/download/v2.49.1/prometheus-2.49.1.linux-amd64.tar.gz"
    dest: "/tmp/prometheus.tar.gz"

- name: Extract Prometheus binary
  ansible.builtin.unarchive:
    src: "/tmp/prometheus.tar.gz"
    dest: "/opt"
    remote_src: yes

- name: Rename Prometheus directory
  ansible.builtin.command:
    cmd: mv "/opt/prometheus-2.49.1.linux-amd64" "/opt/prometheus"

- name: Create directories for Prometheus binaries and configuration
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
  loop:
    - /usr/local/bin
    - /etc/prometheus
    - /var/lib/prometheus

- name: Set permissions for Prometheus binary
  ansible.builtin.file:
    path: "/opt/prometheus/prometheus"
    state: file
    mode: 755

- name: Set permissions for Prometheus binary
  ansible.builtin.file:
    path: "/opt/prometheus/promtool"
    state: file
    mode: 755

- name: Copy Prometheus binaries
  become: true
  ansible.builtin.copy:
    src: "/opt/prometheus/{{ item }}"
    dest: /usr/local/bin/
    remote_src: true
  loop:
    - prometheus
    - promtool
 

- name: Copy Prometheus configuration
  become: true
  ansible.builtin.copy:
    src: "/opt/prometheus/{{ item }}"
    dest: /etc/prometheus/
    remote_src: true
  loop:
    - consoles
    - console_libraries

- name: Remove Prometheus tar file
  become: true
  ansible.builtin.file:
    path: /tmp/prometheus.tar.gz
    state: absent

- name: Set permissions for Prometheus 
  become: true
  ansible.builtin.file:
    path: "{{ item.path }}"
    owner: prometheus
    group: prometheus
    recurse: yes
  loop:
    - { path: /etc/prometheus }
    - { path: /etc/prometheus/consoles }
    - { path: /etc/prometheus/console_libraries }
    - { path: /var/lib/prometheus }

- name: Set permissions for Prometheus binaries
  become: true
  ansible.builtin.file:
    path: "{{ item.path }}"
    owner: prometheus
    group: prometheus
    mode: 755
  loop:
    - { path: /usr/local/bin/prometheus }
    - { path: /usr/local/bin/promtool }


- name: Copy Prometheus configuration
  become: true
  ansible.builtin.template:
    src: prometheus.yml.j2
    dest: "/etc/prometheus/prometheus.yml"
  vars: 
    aws_access_key_id: ${{ aws_access_key_id }}
    aws_secret_access_key: ${{ aws_secret_access_key }}
    alertmanagerhost: "{{ inventory_hostname }}"

- name: Copy systemd service file
  become: true
  ansible.builtin.template:
    src: prometheus.service.j2
    dest: "/etc/systemd/system/prometheus.service"

- name: Remove Prometheus directory
  become: true
  ansible.builtin.file:
    path: /opt/prometheus
    state: absent

- name: Reload systemd
  become: true
  ansible.builtin.systemd:
    name: prometheus
    daemon_reload: yes
    state: reloaded

- name: Ensure prometheus is running and enabled
  become: true
  ansible.builtin.systemd:
    name: prometheus
    state: started
    enabled: yes

- name: Install pip for Python 3
  apt:
    name: python3-pip
    state: present
  become: yes

- name: Install Docker Python library
  pip:
    name: docker
    #executable: /usr/bin/python3  # Specify the Python interpreter if needed
    state: present  # Ensure the library is installed
  become: yes  # If sudo privileges are required for installation


- name: Pull Mailhog Docker image
  docker_image:
    name: mailhog/mailhog
    state: present

- name: Create Mailhog container
  docker_container:
    name: mailhog
    image: mailhog/mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    state: started